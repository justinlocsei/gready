import { ExtractArrayType } from './types/util';
import { OutputHandler } from './types/system';

const CONSOLE_OUTPUT_METHODS = [
  'debug',
  'error',
  'log',
  'warn'
] as const;

type ConsoleOutputMethod = ExtractArrayType<typeof CONSOLE_OUTPUT_METHODS>;

interface ConsoleOutput {
  args: any[];
  method: ConsoleOutputMethod;
}

/**
 * Capture all console output generated by a function
 */
export function captureConsoleOutput(
  runAction: () => void,
  methods: ConsoleOutputMethod[]
): ConsoleOutput[] {
  const previousMethods: { [K in ConsoleOutputMethod]?: typeof console[K]; } = {};
  const output: ConsoleOutput[] = [];

  try {
    methods.forEach(function(method) {
      previousMethods[method] = console[method];

      console[method] = function(...args: any[]) {
        output.push({ args, method });
      };
    });

    runAction();
  } finally {
    CONSOLE_OUTPUT_METHODS.forEach(function(method) {
      const previousMethod = previousMethods[method];

      if (previousMethod) {
        console[method] = previousMethod;
      }
    });
  }

  return output;
}

/**
 * Get the arguments passed to the current process
 */
export function getArgs(): string[] {
  return process.argv;
}

/**
 * Read the value of an environment variable
 */
export function getEnvironmentVariable(name: string): string | undefined {
  return process.env[name];
}

/**
 * Create a function that writes a message to a stream
 */
function createStreamWriter(stream: NodeJS.WritableStream): OutputHandler {
  return function(message: string) {
    stream.write(message + '\n');
  };
}

/**
 * Create a function to write output to stderr
 */
export function createStderrWriter(): OutputHandler {
  return createStreamWriter(process.stderr);
}

/**
 * Create a function to write output to stdout
 */
export function createStdoutWriter(): OutputHandler {
  return createStreamWriter(process.stdout);
}

/**
 * Run fallback code when an expected file is missing
 */
export async function handleMissingFile<T>(
  runAction: () => Promise<T>,
  handleMissing: () => Promise<T>
): Promise<T> {
  try {
    return await runAction();
  } catch (error) {
    if (isSystemError(error) && error.code === 'ENOENT') {
      return handleMissing();
    } else {
      throw error;
    }
  }
}

/**
 * Mark the current process as failed
 */
export function markProcessAsFailed(): void {
  process.exitCode = 1;
}

/**
 * Determine whether an error is a system error
 */
function isSystemError(error: unknown): error is NodeJS.ErrnoException {
  return error instanceof Error && 'code' in error;
}
